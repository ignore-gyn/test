# -*- coding: utf-8 -*-

START_ITEM = 0
START_LIST = 1
END_LIST = 2

class LogParser(object):
    def __init__(self):
#         self.__item_value = None
#         self.__item_len = None
#         self.__item_type = None
        pass

    def parse_len(self, log):
        # timestampチェック
        pass

    def parse_hdr(self, log):
        # target SFチェック
        # targetならここで、generatorのインスタンス化
        pass

    def parse_msg(self, log):
        # depth : メッセージ構造の妥当性チェックのみに内部で使う
        # readable_depth : SML、ダイジェスト等外に渡す用に使う

        item = {
                "type" : None,
                "length" : None,
                "value" : None,
                "readable_depth" : [0],
                "status": None,
                "annot": ""
                }
        depth = []

        for line in log:
            if len(item["readable_depth"]) == 0:
                print "readable_depth len is 0"
#                 return msg.get_digest()
                break

            if line.find('<L') > -1:
                item["type"] = "L"
                item["value"] = None
                item["length"] = int(line[line.find('[')+1: line.rfind(']')])

                item["readable_depth"][-1] += 1
                if len(depth) > 0:
                    depth[-1] -= 1

                if item["length"] != 0:    # <L>じゃないことを確認
                    item["readable_depth"].append(0)
                    depth.append(item["length"])
                    item["status"] = START_LIST
                else:
                    item["status"] = START_ITEM

            elif line.find('<') > -1:
                space_pos = line.rfind(' ')
                if space_pos == -1:
                    item["type"] = line[line.find('<')+1: line.rfind('[')]
                    item["value"] = None
                else:
                    item["type"] = line[line.find('<')+1: line.rfind('[')]
                    item["value"] = line[space_pos+1: line.rfind('>')]
                item["length"] = int(line[line.find('[')+1: line.rfind(']')])

                item["readable_depth"][-1] += 1
                if len(depth) > 0:
                    depth[-1] -= 1

                item["status"] = START_ITEM

            elif line.find('>') > -1:
                item["type"] = "closeL"
                item["length"] = None
                item["value"] = None

                item["readable_depth"].pop()
                depth.pop()
#                 print line.ljust(40, ' ') + " # depth=" + str(readable_depth)
#                 digest["detail"] += line + '\n'
#                 msg.notify_end_list(item)
                item["status"] = END_LIST

#             msg.notify_item(item)
            yield item

#         return msg.get_digest()

S1F2_format = {
1: "NAME"
}

S6F11_format = {
"L": 3,
1: "DATAID",
2: "CEID",
3: {
    "L": -1,
    -1: {
        "L": 2,
        1: "RPTID",
        2: {
            "L": -1,
            -1 : "V"
            }
        }
    }
}

S16F11_format = {
"L": 7,
1: "DATAID",
2: "PRJOBID",
3: "MF",
4: {
    "L": -1,
    -1: "MID"
    },
5: {
    "L": 3,
    1: "RECIPE_METHOD",
    2: "RCPSPEC",
    3: {
        "L": -1,
        -1: {
             "L": 2,
             1: "RCP_PAR_NM",
             2: "RCP_PAR_VAL"
             }
        }
    },
6: "PROCESSSTART",
7: "PAUSEEVENT"
}
S16F11_digest_value_target = ["PRJOBID", "RCPSPEC", ("RCP_PAR_NM", "RCP_PAR_VAL")]

S16F15_format = {
"L": 2,
1: "DATAID",
2: {
    "L": -1,
    -1: {
        "L": 6,
        1: "PRJOBID",
        2: "MF",
        3: {
            "L": -1,
            -1: "MID"
            },
        4: {
            "L": 3,
            1: "RECIPE_METHOD",
            2: "RCPSPEC",
            3: {
                "L": -1,
                -1: {
                     "L": 2,
                     1: "RCP_PAR_NM",
                     2: "RCP_PAR_VAL"
                     }
                }
            },
        5: "PROCESSSTART",
        6: "PAUSEEVENT"
        }
    }
}
S16F15_digest_value_target = ["PRJOBID", "RCPSPEC"]

S1F1_format = {}   # header-only

S2F33_format = {
"L": 2,
1: "DATAID",
2: {
    "L": -1,
    -1: {
         "L": 2,
         1: "RPTID",
         2: {
             "L": -1,
             -1: "VID"
             }
         }
    }
}

S2F34_fomat = {0: "DRACK"}
S2F34_fomat = "DRACK"


def generate_digest_val_depth_dict():
    digest_val_depth_dict = {}
    depth = [1]
    tree = S16F11_format
    target = []
    for v in S16F11_digest_value_target:
        if isinstance(v, tuple):
            for i in v:
                target.append(i)
        else:
            target.append(v)
    print target

    tree_iterator(tree, depth, digest_val_depth_dict, target)
    print generate_digest_val_depth_dict
    return digest_val_depth_dict

import copy
def tree_iterator(tree, depth, digest_val_depth_dict, target_list):
    print "target", target_list
    d = tree.get("L")
#     if None:    # only 1 item
#     else

    if d != -1:
        depth.append(0)
        for i in xrange(d):
            depth[-1] += 1
            item_name = tree[i+1]

            if isinstance(item_name, dict):
                tree_iterator(item_name, depth, digest_val_depth_dict, target_list)
            else:
                print item_name, depth
                if item_name in target_list:
                    digest_val_depth_dict[item_name] = copy.deepcopy(depth)
    else:
        depth.append(-1)
        item_name = tree[-1]
        print item_name, depth

        if isinstance(item_name, dict):
            tree_iterator(item_name, depth, digest_val_depth_dict, target_list)
        else:
            print item_name, depth
            if item_name in target_list:
                digest_val_depth_dict[item_name] = copy.deepcopy(depth)

    if len(depth) > 0:
        depth.pop()



def compare_depth_tree(expect, depth):
    if len(depth) < len(expect):
        return False

    for (i, j) in zip(expect, depth):
        if i == -1:
            continue
        if i != j:
            return False
    return True

def create_S6F11_testdata():

    f = open("./data/text3.txt", 'w')
    txt = '''<L[3]
    <U4[1] 1001>
    <U4[1] 9999>
    <L[503]
        <L[2]
            <U4[1] 1001>
            <L[4]
                <L[0]>
                <L[2]
                    <L[1]
                        <A[3] "abc">
                    >
                    <U4[1] 123>
                >
                <A[4] "test">
                <U4[1] 987>
            >
        >'''
    txt += '''
        <L[2]
            <U4[1] 1002>
            <L[0]>
        >'''
    txt += '''
        <L[2]
            <U4[1] 1004>
            <L[2]
                <L[0]>
                <A[4] "ttmp">
                <U4[1] 6565>
            >
        >''' * 500
    txt += '''
        <L[2]
            <U4[1] 1003>
            <L[3001]
                <L[1]
                    <L[1]
                        <L[0]>
                    >
                >'''

    txt += '''
                <A[4] "lkjo">
                <U4[1] 123>
                <L[0]>''' * 1000
    txt += '''
            >
        >
    >
>'''
    f.write(txt)
    f.close()

import datetime
class Timer(object):
    def enter(self):
        self.start = datetime.datetime.now()
    def exit(self):
        diff = datetime.datetime.now() - self.start
        print("time: %s" % str(diff))
        self.start = None

def iterator1(f):
    '''
    1. 毎アイテムごとにフォーマットの頭から辿り、アイテム名を取得する方法
    '''

    log_parser = LogParser()
    digest = log_parser.parse_msg(f)

    for d in digest:

#         # a. 辞書に登録されたアイテムと一致するかチェックする方法
#         for item_depth in val_depth_dict:
#             if compare_depth_tree(val_depth_dict[item_depth], d["readable_depth"]):
#                 val.setdefault(item_depth, []).append(d["value"])

        format = S6F11_format
        ret = ""
        current_item = "None"

        if d["status"] is END_LIST:
            continue

        for index in d["readable_depth"][1:]:
            if index == 0:
                break

            if not format:   # {}
                break

            ret = format.get(index)
            if isinstance(ret, dict):
                format = ret
            elif ret is None:
                ret = format.get(-1)
                if ret is None:
                    print "<not found>"
                    break
                elif isinstance(ret, dict):
                    format = ret
                else:
                    current_item = ret
                    break
            else:
                current_item = ret
                break

#         print current_item.ljust(10), d["type"].ljust(2), d["value"]

def iterator2(f):
    '''
    2. 毎アイテム解析と一緒に、フォーマット内の位置を移動していき、現在のアイテム名を取得する
    '''

    log_parser = LogParser()
    digest = log_parser.parse_msg(f)
    format = S6F11_format
    index = 0

    for d in digest:
        if len(d["readable_depth"]) == 2 and d["readable_depth"][1] == 0:
            continue

        ret = ""
        current_item = "None"

        if d["status"] is END_LIST:
            format = S6F11_format
            for i in d["readable_depth"][1:-1]:
                if i == 0:
                    break

                if not format:   # {}
                    break

                ret = format.get(i)
                if isinstance(ret, dict):
                    format = ret
                elif ret is None:
                    ret = format.get(-1)
                    if ret is None:
                        print "<not found>"
                        break
                    elif isinstance(ret, dict):
                        format = ret
                    else:
                        current_item = ret
                        break
                else:
                    current_item = ret
                    break
            index = i
            continue

        elif d["status"] is START_LIST:
            index += 1
            ret = format.get(index)
            if ret is None:
                ret = format.get(-1)
                if ret is None:
                    print "<not found>"
                elif isinstance(ret, dict):
                    format = ret
                    index = 0
                    continue
            elif isinstance(ret, dict):
                format = ret
                index = 0
                continue

        elif d["status"] is START_ITEM:
            index += 1
            ret = format.get(index)
            if ret is None:
                ret = format.get(-1)
                if ret is None:
                    print "<not found>"
                elif isinstance(ret, dict):
                    format = ret
                    index = 0
                    continue
                else:
                    current_item = ret
                index = 0
            elif isinstance(ret, dict):
                    format = ret
                    index = 0
                    continue
            else:
                current_item = ret

#         print current_item.ljust(10), d["type"].ljust(2), d["value"]

def iterator3(f, sf_format):
    '''
    2. 毎アイテム解析と一緒に、フォーマット内の位置を移動していき、現在のアイテム名を取得する
    '''

    log_parser = LogParser()
    digest = log_parser.parse_msg(f)
    format = sf_format

    for l, d in enumerate(digest):
        if len(d["readable_depth"]) == 2 and d["status"] is START_LIST:
            continue

        ret = ""
        current_item = "None"

        if d["status"] is END_LIST:
            format = sf_format
            for i in d["readable_depth"][1:-1]:
                if i == 0:
                    break

                if not format:   # {}
                    format = None
                    break

                ret = format.get(-1)
                if ret is None:
                    ret = format.get(i)

                if ret is None:
                    print "<not found>"
                    format = None
                    break
                elif isinstance(ret, dict):
                    format = ret
                else:
                    format = None
                    break

        elif format:
            list_count = format.get("L")
            if list_count == -1:
                ret = format.get(-1)
            elif d["status"] is START_LIST:
                ret = format.get(d["readable_depth"][-2])
            else:
                ret = format.get(d["readable_depth"][-1])

            if ret is None:
                print "<not found>"
            elif isinstance(ret, dict):
                if d["status"] is START_LIST:
                    format = ret
                else:
                    print "<0-length item or ERROR>"
            else:
                current_item = ret
                if d["status"] is START_LIST:
                    format = None

        print d["readable_depth"]
        print l, ': ', d["type"].ljust(2), d["value"]
        print current_item.ljust(10)
        print format
        print '-' * 80

class BaseDigestGenerator

import sys
if __name__ == '__main__':
    timer = Timer()

#     val_depth_dict = generate_digest_val_depth_dict()
#     val = {}

    fp = open("./data/textS16F15.txt")
    f = fp.readlines()
    fp.close()

    '''
    1. 指定したアイテムにコメントをつける

    2. 指定したアイテムの値を取得する。L型の場合は値を結合する
        a. 指定したアイテム名に対応するアイテムの値を出現順に取得する(S16F15等)
        b. 指定したアイテム名リスト順に値を取得する(S6F11リスト指定時のみ)
        c. 指定したアイテム名と値名に対応する、アイテムの名前および値をそれぞれ別のアイテムから取得する。出力は出現順
            (aのアイテムと複合)(S16F11等)
        c.1 cの亜種として、アイテム名はID->Name変換をして取得する。出力は出現順(S6F11リスト無指定時のみ)

    * フォーマットからアイテム名を取得する方法
    下記のパフォーマンスを比較する
    1. 毎アイテムごとに、フォーマットの頭から辿り、アイテム名を取得する
    ★2. 毎アイテム解析と一緒に、フォーマット内の位置を移動していき、現在のアイテム名を取得する

    * 現在のフォーマット表現の問題点
    可変長リスト ({"L" : -1}を辞書に含む)自体がアイテム名を持たない→これ自体を値収集orコメント付与対象に指定できない
    対策： "name"要素を可変長リストの辞書に追加する
    ただ、フォーマット上使用されるであろう可変長リストは、E5上も無名のもののみと想定されるため、
    本対策は不要と思われる
    '''

    for count in xrange(1):
#         timer.enter()
#         for loop in xrange(1000):
#             iterator1(f)
#
#         print "idea1: "
#         timer.exit()

    #     print '#' * 80

#         timer.enter()
#         for loop in xrange(1000):
#             iterator2(f)
#
#         print "idea2: "
#         timer.exit()

        timer.enter()
        for loop in xrange(1):
            iterator3(f, S16F15_format)

        print "idea3: "
        timer.exit()


