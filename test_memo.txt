# イベントリンク読み込みの方針
・event_xxxはチェックしない
	メッセージ内はreport idのみを頼りにパース
・report_xxxはすべて読み込む
	パースに必要なreportがあればエラーは出さない
	何度もエラーメッセージを出さない仕組みが必要
	どこかでエラーが出たreport idを管理
	
	error_report_id = set()
	error_report_id.add(rptid)	// 重複してもOK

# CEIDなどint変換しているところに注意、例外処理いれる

# 長いB値の出力

# シグナルハンドラ - 後で

------
・フォーマットが単一アイテムメッセージに対して
o	<L[0]>,
o	L[0以上],	// foramt error
o	A[0]
o	複数アイテム	// エラーにはならない△ binaryパースエラーになることを確認する

・フォーマットの頭がListメッセージに対して
o	<L[0]>		// エラーにはならない△
#	L[0以上]	// ほかのテストで確認
o	A[0]		// エラーにはならない(最初のアイテムが取得される)△
o	複数アイテム	// エラーにはならない△ binaryパースエラーになることを確認する

・pair valueの
o	nameがL値あり/なし	// アイテムが出力されない、フォーマットエラーはなし
o	nameがA[0]
o	nameがA[0以上]
o	nameが数値
	
o	valueがL値あり/なし
o	valueがA[0]
o	valueがA[0以上]
p	valueが数値

・pair valueの直前が
o	non-targetアイテム
	通常targetアイテム
o		L値あり/なし
o		A[0]
o		A[0以上]
o		数値
	pair targetアイテムの
		# 無理、不要
		別のnameL値あり/なし
		別のnameA[0]
		別のnameA[0以上]
		別のname数値
		
		# 無理、不要
		同じ(連続)nameL値あり/なし
		同じ(連続)nameA[0]
		同じ(連続)nameA[0以上]
		同じ(連続)name数値
		
		上記のvalue版

・target valueの直前が
o	non-targetアイテム
	通常targetアイテム
o		L値あり/なし
o		A[0]
o		A[0以上]
o		数値
	pair targetアイテムの
		出力なし
o			nameなし
o			valueなし
o		出力あり

・annot対象が
o	L[0]
o	L[0以上]
o	A[0]
o	A[0以上]
	
・フォーマット違い
o	フォーマットにL[0]	// フォーマット通りL[0]が来れば、エラーにはならない
o	可変長Lに通常アイテム	// エラーにはならないが△ ダイジェストされない
p	可変長LにL[0]
o	可変長LにL[1]
o	可変長LにL[2]
o	固定長Lに短いL
o	固定長Lに長いL
	
# L値あり/なし
	なし
		<L[0]>,
		<L[1]
			<L[2]
				<L[0]>
				<A[0]>
			>
		>
	あり
		<L[1]
			<L[2]
				<L[0]>
				<A[5] "hello1">
			>
		>
		<L[2]
			<A[5] "hello2">
			<L[2]
				<L[0]>
				<A[0]>
			>
		>
		<L[4]
			<A[5] "hello3">
			<L[1]
				<L[0]>
			>
			<U4[1] 123>
			<L[1]
				<A[3] "hey">
			>
		>

	

